void menu() {
    selectMenu();
    int key;
    key=selectMenu();
    while (selectMenu() != 0)
    {
        switch (key)
        {
            case 1: addMovie(); break;
            case 2: removeMovie(); break;
            case 3: addTag(); break;
            case 4: removeTag(); break;
            case 5: addFavourite(); break;
            case 6: searchByUserID(); break;
            case 7: searchByMovieTitle(); break;
            case 0: close(); break;
            default: printf("No number.\n"); break;
        }
    }
    return;
}

void retire(){
    free(movies);
    free(tags);
    free(users);
    free(favourites);
}

int getnum() {
    int num = 0;
    printf("Please select an item: ");
    scanf("%d", &num);
    return num;
}
int selectMenu() {
    printf("<Movie data management program>\n");
    printf("1: Add movie \n2: Remove movie \n"
           "3: Add tag \n4: Remove tag \n"
           "5: Add favourite \n6: Search by user ID \n"
           "7: Search by movie title \n0: Close\n");
    return getnum();
}

void addMovie() {
    Movie *movieEntity;
    movieEntity = (Movie *) malloc(sizeof(Movie));
    char movieIDEntity[12];
    movieEntity -> title = (char *) malloc(sizeof(movieEntity->title)*300);
    char releaseYearEntity[5];
    char sizeof_genreEntity[3];
    movieEntity -> genre = (int *)malloc(sizeof(int)*100);

    while (1) {
        int temp;
        printf("Movie ID to add: ");
        scanf(" %s", movieIDEntity);
        for (int i = 0; i < strlen(movieIDEntity); i++) {
            if(isdigit (*movieIDEntity+i)==0) {
                printf("It is not number\n");
                break;
            }
        }
        int cnt=0;
        for(int i=0; i < strlen(movieIDEntity); i++) {
            if(isdigit (*movieIDEntity+i)!=0)
                cnt++;
        }
        if(cnt==strlen(movieIDEntity) &&cnt!=0) {
            temp=atoi(movieIDEntity);
            movieEntity -> movieID = temp;
            break;
        }
    }

    printf("Title: ");
//    char titleEntity;
//    for(int i=0; titleEntity[i]=getchar() = '\n'; i++) {
//        movieEntity -> title = (char *) realloc(movieEntity -> title, sizeof((movieEntity -> title)+1));
//        printf("%s",titleEntity);
//    }
    scanf(" %s", movieEntity ->title);

    while (1) {
        int temp;
        printf("Release year: ");
        scanf(" %s", releaseYearEntity);
        for (int i = 0; i < strlen(releaseYearEntity); i++) {
            if(isdigit (*releaseYearEntity+i)==0) {
                printf("It is not number\n");
                break;
            }
        }
        int cnt=0;
        for(int i=0; i < strlen(releaseYearEntity); i++) {
            if(isdigit(*releaseYearEntity+i)!=0)
                cnt++;
        }
        if (cnt==strlen(releaseYearEntity) && cnt!=0) {
            temp=atoi(releaseYearEntity);
            movieEntity -> releaseYear = temp;
            break;
        }
    }

    while (1) {
        int temp;
        printf("How many genre do you want to add: ");
        scanf(" %s", sizeof_genreEntity);
        for (int i = 0; i < strlen(sizeof_genreEntity); i++) {
            if(isdigit (*sizeof_genreEntity+i)==0) {
                printf("It is not number\n");
                break;
            }
        }
        int cnt=0;
        for(int i=0; i < strlen(sizeof_genreEntity); i++) {
            if(isdigit(*sizeof_genreEntity+i)!=0)
                cnt++;
        }

        if (cnt==strlen(sizeof_genreEntity) && cnt!=0) {
            temp=atoi(sizeof_genreEntity);
            movieEntity -> sizeof_genre = temp;
            break;
        }
    }

    int genreIndex[100];
    for(int i=1;i<=movieEntity->sizeof_genre;i++) {
        char *inputGenre;
        inputGenre=(char *)malloc(sizeof(char)*20);
        printf("Genre %d: ",i);
        scanf(" %s",inputGenre);
        genreIndex[i]=genreIndex_ByString(inputGenre);
        //movieEntity -> genre = (int *)realloc(movieEntity -> genre, sizeof(int)+1);
    }
    for(int i=1; i<=movieEntity->sizeof_genre;i++) {
        movieEntity -> genre = &genreIndex[i];
    }

    int resultData = addMovieEntity(movieEntity->movieID, movieEntity->title, movieEntity->releaseYear, movieEntity->genre, movieEntity->sizeof_genre);
    if (resultData==SUCCESS)
    {
        printf("ADD SUCCESSFULLY!!\n");
        return;
    }
    else if (resultData==FAIL_MOVIE_ID_ALREADY_EXISTS)
    {
        printf("Already exist movie\n");
        return;
    }
    else if (resultData==FAIL_INVALID_YEAR)
    {
        printf("Invalid year\n");
        return;
    }
    else
    {
        printf("Have some problem. Add again\n");
        return;
    }
}
void removeMovie() {
    int movieIDRemove;
    while(1) {
        printf("Movie ID to remove: ");
        scanf("%d",&movieIDRemove);
        if (movieIDExists(movieIDRemove)==1) {
            break;
        }
        else {
            printf("movie ID doesn't exist\n");
        }
    }
    int movieIndexRemove;
    movieIndexRemove=movieIndex_ByID(movieIDRemove);
    if(deleteMovie_ByIndex(movieIndexRemove)==SUCCESS) {
        printf("REMOVE SUCCESSFULLY!!");
        return;
    }
    else {
        printf("Have some problem. Remove again");
        return;
    }
}
void addTag() {
    Tag *tagEntity;
    tagEntity = (Tag *)malloc(sizeof(Tag));
    char userIDEntity[7];
    char movieIDEntity[12];
    tagEntity -> tag = (char *) malloc(sizeof(tagEntity->tag)*100);
    char timestampEntity[12];

    while (1) {
        int temp;
        printf("User ID to add: ");
        scanf(" %s", userIDEntity);
        for (int i = 0; i < strlen(userIDEntity); i++) {
            if(isdigit (*userIDEntity+i)==0) {
                printf("It is not number\n");
                break;
            }
        }
        int cnt=0;
        for(int i=0; i < strlen(userIDEntity); i++) {
            if(isdigit (*userIDEntity+i)!=0)
                cnt++;
        }
        if(cnt==strlen(userIDEntity) &&cnt!=0) {
            temp=atoi(userIDEntity);
            tagEntity -> userID = temp;
            break;
        }
    }
    while (1) {
        int temp;
        printf("Movie ID to add: ");
        scanf(" %s", movieIDEntity);
        for (int i = 0; i < strlen(movieIDEntity); i++) {
            if(isdigit (*movieIDEntity+i)==0) {
                printf("It is not number\n");
                break;
            }
        }
        int cnt=0;
        for(int i=0; i < strlen(movieIDEntity); i++) {
            if(isdigit (*movieIDEntity+i)!=0)
                cnt++;
        }
        if(cnt==strlen(movieIDEntity) &&cnt!=0) {
            temp=atoi(movieIDEntity);
            tagEntity -> movieID = temp;
            break;
        }
    }
    printf("Tag: ");
    ////modify here
    scanf(" %s",tagEntity->tag);
    while (1) {
        long long temp;
        printf("timestamp to add: ");
        scanf(" %s", timestampEntity);
        for (int i = 0; i < strlen(timestampEntity); i++) {
            if(isdigit (*timestampEntity+i)==0) {
                printf("It is not number\n");
                break;
            }
        }
        int cnt=0;
        for(int i=0; i < strlen(timestampEntity); i++) {
            if(isdigit (*timestampEntity+i)!=0)
                cnt++;
        }
        if(cnt==strlen(timestampEntity) &&cnt!=0) {
            temp=atoi(timestampEntity);
            tagEntity -> timestamp = temp;
            break;
        }
    }

    int resultData=addTagEntity(tagEntity->userID, tagEntity->movieID, tagEntity->tag, tagEntity->timestamp);

    if (resultData==SUCCESS)
    {
        printf("ADD SUCCESSFULLY!!");
        return;
    }
    else
    {
        printf("Have some problem. Add again");
        return;
    }
}
void removeTag() {
    int tagRemove;
    while(1) {
        printf("Tag to remove: ");
        scanf("%d",&tagRemove);
        if ((tagRemove)==1) {
            break;
        }
        else {
            printf("Tag doesn't exist\n");
        }
    }
    int tagIndexRemove;
    tagIndexRemove= *tagIndex_ByUserID(tagRemove);
    if(deleteTag_ByIndex(tagIndexRemove)==SUCCESS) {
        printf("REMOVE SUCCESSFULLY!!");
        return;
    }
    else {
        printf("Have some problem. Remove again");
        return;
    }
}
void addFavourite() {
//    Favourite *favouriteEntity;
//    favouriteEntity=(Favourite *)malloc(sizeof(Favourite));
//
//    printf("User ID to add: ");
//    scanf("%d",&favouriteEntity->userID);
//    printf("Movie ID to add: ");
//    scanf("%d",&favouriteEntity->movieID);
//
//    addFavouriteEntity(favouriteEntity->userID, favouriteEntity->movieID);
//
//    if (addFavouriteEntity(favouriteEntity->userID, favouriteEntity->movieID)==SUCCESS)
//    {
//        printf("ADD SUCCESSFULLY!!");
//        return;
//    }
//    else
//    {
//        printf("Have some problem. Add again");
//        return;
//    }
}
void searchByUserID() {
    int searchUserID;
    printf("User ID to search: ");
    scanf("%d",&searchUserID);

}
void searchByMovieTitle() {
    char *searchMovieTitle;
    printf("Movie title to search: ");
    scanf(" %s",searchMovieTitle);

}